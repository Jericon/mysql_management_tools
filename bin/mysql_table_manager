#!/usr/bin/env ruby

require 'getoptlong'
require 'ostruct'
require 'inifile'
require 'mysql'
require 'mysql_management/basic_interaction'
require 'mysql_management/mysql_connection_manager'
require 'mysql_table_manager'

@options = OpenStruct.new
@options.verbose        = false
@options.dry_run        = false
@options.yes            = false
@options.hosts          = []
@options.user           = "root"
@options.password       = ""
@options.db             = "test"
@options.table_pattern  = //
@options.table_start    = nil
@options.task           = nil
@options.direction      = :forward

def usage(exit_code, message = nil)
  print "Error: #{message}\n\n" unless message.nil?

  print <<'END_OF_USAGE'

Usage: mysql_table_manager <options> -k <task>

  --help, -?
    Print this usage text.

  --verbose, -v
    Print a lot of verbose output while running

  --dry-run, -D
    Don't actually modify any tables, just print what would have been done.

  --local-only, -L
    Use SET SESSION sql_log_bin to ensure that changes do not get logged in
    the binary log, and thus do not propagate to any connected slaves.

  --yes, -y
    Don't ask, just do it.

  --host, -h <mysql host>
  --user, -u <mysql user>
  --password, -p <mysql password>
  --db, -d <mysql db>
    The MySQL host, user name, password and default database to use when
    connecting to MySQL. The host option may be specified multiple times.

  --table_pattern, -t <regex>
    Use the supplied regular expression to filter tables to maintain.

  --table_start, -s <host>/<table>
    The name of the host and table to start maintenance on. All tables before
    this point in the ordered list will be skipped.

  --require, -r <name>
    Require the file name specified. This allows for loading classes
    (especially subclassing MysqlTableManager::Task) at runtime. Files to
    load must be present in some directory in Ruby's load path.

  --unapply, -U
    Unapply the task instead of applying it. Not all tasks may support
    unapply, and not all operations are even un-applyable.

  --task, -k <task>
    Run the supplied task. The following task are supported:

END_OF_USAGE

  MysqlTableManager::TableManager.each_supported_task do |name, description|
    puts "#{name}"
    puts "  #{description}".gsub("\n", "\n  ")
    puts
  end
  puts

  exit exit_code
end

if File.exists?(File.expand_path("~/.my.cnf"))
  my_cnf = IniFile.load(File.expand_path("~/.my.cnf"))
  section = my_cnf['client']
  unless section['user'].nil?
    @options.user = section['user']
  end
  unless section['password'].nil?
    @options.password = section['password']
  end
end

getopt_options = [
  [ "--help",             "-?",     GetoptLong::NO_ARGUMENT ],
  [ "--verbose",          "-v",     GetoptLong::NO_ARGUMENT ],
  [ "--dry-run",          "-D",     GetoptLong::NO_ARGUMENT ],
  [ "--local-only",       "-L",     GetoptLong::NO_ARGUMENT ],
  [ "--yes",              "-y",     GetoptLong::NO_ARGUMENT ],  
  [ "--host",             "-h",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--user",             "-u",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--password",         "-p",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--db",               "-d",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--table-pattern",    "-t",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--table-start",      "-s",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--task",             "-k",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--require",          "-r",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--unapply",          "-U",     GetoptLong::NO_ARGUMENT ],
]

getopt = GetoptLong.new(*getopt_options)

getopt.each do |opt, arg|
  case opt
    when "--help"
      usage 0
    when "--verbose"
      @options.verbose = true
    when "--dry-run"
      @options.dry_run = true
      @options.verbose = true
    when "--local-only"
      @options.local_only = true
    when "--yes"
      @options.yes = true
    when "--host"
      @options.hosts += arg.split(",")
    when "--user"
      @options.user = arg
    when "--password"
      @options.password = arg
    when "--db"
      @options.db = arg
    when "--table-pattern"
      @options.table_pattern = Regexp.compile(arg)
    when "--table-start"
      @options.table_start = arg
    when "--task"
      @options.task = arg
    when "--require"
      require arg
    when "--unapply"
      @options.direction = :backward
  end
end

if @options.hosts.empty?
  @options.hosts << "localhost"
end

if @options.task.nil?
  usage 1, "A task name must be provided with --task or -k"
end

logger = BasicInteraction::Logger.new
asker  = @options.yes ? nil : BasicInteraction::Asker.new

connection_manager = MysqlConnectionManager.new(logger, asker)

connection_manager.set_options({
  :verbose      => @options.verbose,
  :dry_run      => @options.dry_run,
  :local_only   => @options.local_only,
})

connection_manager.set_default_credentials(
  @options.user,
  @options.password,
  @options.db
)

@options.hosts.each do |host|
  connection_manager.add_host(host)
end

table_manager = MysqlTableManager::TableManager.new(logger, asker, connection_manager)

table_manager.maintain_tables(@options.task,
  @options.direction,
  @options.table_pattern,
  @options.table_start)
